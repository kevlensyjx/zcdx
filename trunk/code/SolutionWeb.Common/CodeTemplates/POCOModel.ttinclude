<#@ template language="C#" hostspecific="True"#> 
<#@include file="Manager.ttinclude"#>  
<#+
	private  void Create(string[] dllurls) {
		Manager manager = Manager.Create(Host, GenerationEnvironment);
		string solutionDir = Host.ResolveAssemblyReference("$(SolutionDir)");
		foreach(string dllurl in dllurls)
		{
		    string name_space = dllurl.Split('/')[0];
		    byte[] fileData = File.ReadAllBytes(Path.Combine(solutionDir, dllurl));
            Assembly assembly = Assembly.Load(fileData);
			foreach(Type entity in assembly.ExportedTypes)
			{
		        if(!entity.Name.Contains("Entities") && !entity.Name.StartsWith("VIEW") && !entity.Name.StartsWith("POCO")&& !entity.FullName.Contains("+") && !entity.Name.EndsWith("Model"))
				{
				manager.StartNewFile(entity.Name + ".cs"); 
#>  
<#=Createx(entity,name_space) #>  
<#+
				manager.EndBlock(); 
			   }
            }
		}
		manager.Process(true);
    }
	private string Createx(Type entity,string name_space) {
		string str ="using System;\n";
		str +="using System.Collections.Generic;\n";
		str +="namespace "+name_space+"\n";
		str +="{\n";
		str +="\tpublic partial class "+entity.Name+"{\n";
		str +="\t\tpublic "+entity.Name+" ToPOCO(){\n";
			str +="\t\treturn new "+entity.Name+"(){\n";
		foreach (System.Reflection.PropertyInfo pi in entity.GetProperties(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.DeclaredOnly))

		{
			if(!pi.GetAccessors()[0].IsVirtual)
			{
				str += "\t\t\t\t"+ pi.Name + " = "+pi.Name+ ",\n";
			}
		}
		str +="\t\t\t};\n";
		str +="\t\t}\n";
		str +="\t}\n";
		str +="}";
		return str;
	}
#>